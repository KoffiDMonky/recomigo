#!/usr/bin/env node

/**
 * Test de la limitation de longueur du champ "Recommand√© par"
 */

function testRecommendedByLength() {
  console.log('üìè Test de la limitation de longueur "Recommand√© par"...\n');

  // Simuler diff√©rents cas de noms longs
  const testCases = [
    { name: 'Adrien', expected: 'OK' },
    { name: 'Marie', expected: 'OK' },
    { name: 'Jean-Pierre', expected: 'OK' },
    { name: 'Jean-Pierre-Marie-Claude', expected: 'Limit√©' },
    { name: 'Tr√®sLongNomDeFamilleAvecBeaucoupDeCaract√®res', expected: 'Limit√©' },
    { name: 'Dr. Jean-Pierre-Marie-Claude de la Fontaine', expected: 'Limit√©' },
    { name: 'A', expected: 'OK' },
    { name: 'Jean', expected: 'OK' },
    { name: 'Jean-Pierre-Marie', expected: 'OK' },
    { name: 'Jean-Pierre-Marie-Claude-Henri', expected: 'Limit√©' }
  ];

  console.log('üìã Test des diff√©rents cas:');
  testCases.forEach((testCase, index) => {
    const fullText = `Recommand√© par ${testCase.name}`;
    const isLong = fullText.length > 30; // Limite arbitraire pour le test
    const status = isLong ? '‚ö†Ô∏è' : '‚úÖ';
    
    console.log(`   ${index + 1}. "${testCase.name}"`);
    console.log(`      Texte complet: "${fullText}"`);
    console.log(`      Longueur: ${fullText.length} caract√®res`);
    console.log(`      Status: ${status} ${isLong ? 'Limit√©' : 'OK'}`);
    console.log('');
  });

  // Test de simulation d'interface
  console.log('üñ•Ô∏è Simulation d\'interface:');
  const mockItems = [
    { title: 'The Matrix', recommendedBy: 'Adrien' },
    { title: 'Inception', recommendedBy: 'Jean-Pierre-Marie-Claude de la Fontaine' },
    { title: 'Interstellar', recommendedBy: 'Marie' },
    { title: 'Breaking Bad', recommendedBy: 'Dr. Jean-Pierre-Marie-Claude-Henri de la Fontaine et Cie' },
    { title: 'Game of Thrones', recommendedBy: 'Jean' }
  ];

  mockItems.forEach((item, index) => {
    const fullText = `Recommand√© par ${item.recommendedBy}`;
    const isLong = fullText.length > 30;
    const displayText = isLong ? `${fullText.substring(0, 27)}...` : fullText;
    
    console.log(`   ${index + 1}. ${item.title}:`);
    console.log(`      - Recommand√© par: "${item.recommendedBy}"`);
    console.log(`      - Longueur: ${fullText.length} caract√®res`);
    console.log(`      - Affichage: "${displayText}"`);
    console.log(`      - Status: ${isLong ? '‚ö†Ô∏è Limit√©' : '‚úÖ OK'}`);
    console.log('');
  });
}

// Test de validation des styles
function testStyleValidation() {
  console.log('üé® Test de validation des styles...\n');

  console.log('‚úÖ Styles appliqu√©s:');
  console.log('   - flex: 1');
  console.log('   - flexShrink: 1');
  console.log('   - marginRight: 10');
  console.log('   - numberOfLines: 1');
  console.log('   - ellipsizeMode: "tail"');
  
  console.log('\nüì± Comportement attendu:');
  console.log('   - Le texte se limite √† une ligne');
  console.log('   - Les points de suspension apparaissent si trop long');
  console.log('   - Le bouton "D√©couvrir" reste visible');
  console.log('   - Espacement correct entre texte et bouton');
}

// Test de compatibilit√© avec le bouton
function testButtonCompatibility() {
  console.log('\nüîò Test de compatibilit√© avec le bouton...\n');

  console.log('üìê Layout du bottomContainer:');
  console.log('   - flexDirection: "row"');
  console.log('   - alignItems: "center"');
  console.log('   - justifyContent: "flex-start"');
  console.log('   - gap: 15');
  
  console.log('\nüéØ R√©sultat attendu:');
  console.log('   - Texte "Recommand√© par" √† gauche');
  console.log('   - Bouton "D√©couvrir" √† droite');
  console.log('   - Espacement de 15px entre les deux');
  console.log('   - Texte tronqu√© si n√©cessaire');
  console.log('   - Bouton toujours visible et cliquable');
}

// Ex√©cution
function runTests() {
  console.log('üöÄ Test de la limitation de longueur "Recommand√© par"\n');
  
  testRecommendedByLength();
  testStyleValidation();
  testButtonCompatibility();
  
  console.log('\n‚úÖ Tests termin√©s !');
  console.log('\nüìã R√©sum√©:');
  console.log('   - Limitation √† une ligne');
  console.log('   - Ellipse automatique si trop long');
  console.log('   - Espacement pr√©serv√© avec le bouton');
  console.log('   - Interface responsive et propre');
  console.log('   - Compatibilit√© avec tous les noms');
}

if (require.main === module) {
  runTests();
} 