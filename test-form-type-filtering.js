#!/usr/bin/env node

/**
 * Test du filtrage par type dans les formulaires
 */

// Simulation de l'environnement React Native avec axios
const axios = require('axios');
global.axios = axios;

// Import du service
const MovieService = require('./services/MovieService.js');

async function testMovieForm() {
  console.log('üé¨ Test du formulaire FILM (type="movie")...\n');

  try {
    // Test avec "Matrix" - devrait retourner des films
    console.log('üîç Recherche "Matrix" (type="movie")...');
    const movieSuggestions = await MovieService.searchMovieSuggestions('Matrix', 'movie');
    
    if (movieSuggestions && movieSuggestions.length > 0) {
      console.log(`‚úÖ ${movieSuggestions.length} r√©sultats trouv√©s\n`);
      
      // V√©rifier que ce sont bien des films
      const movies = movieSuggestions.filter(s => s.type === 'Film');
      const series = movieSuggestions.filter(s => s.type === 'S√©rie');
      
      console.log(`üìä R√©partition:`);
      console.log(`   - Films: ${movies.length}`);
      console.log(`   - S√©ries: ${series.length}`);
      
      if (movies.length > 0) {
        console.log(`\nüéØ Premier film trouv√©:`);
        console.log(`   - Titre: ${movies[0].title}`);
        console.log(`   - Ann√©e: ${movies[0].year}`);
        console.log(`   - Type: ${movies[0].type}`);
        console.log(`   - R√©alisateur: ${movies[0].director || 'N/A'}`);
      }
      
      if (series.length > 0) {
        console.log(`\n‚ö†Ô∏è ATTENTION: S√©ries trouv√©es dans la recherche de films!`);
        console.log(`   - Titre: ${series[0].title}`);
        console.log(`   - Type: ${series[0].type}`);
      }
      
    } else {
      console.log('‚ùå Aucun r√©sultat trouv√©');
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
  }
}

async function testSerieForm() {
  console.log('\nüì∫ Test du formulaire S√âRIE (type="tv")...\n');

  try {
    // Test avec "Breaking Bad" - devrait retourner des s√©ries
    console.log('üîç Recherche "Breaking Bad" (type="tv")...');
    const serieSuggestions = await MovieService.searchMovieSuggestions('Breaking Bad', 'tv');
    
    if (serieSuggestions && serieSuggestions.length > 0) {
      console.log(`‚úÖ ${serieSuggestions.length} r√©sultats trouv√©s\n`);
      
      // V√©rifier que ce sont bien des s√©ries
      const movies = serieSuggestions.filter(s => s.type === 'Film');
      const series = serieSuggestions.filter(s => s.type === 'S√©rie');
      
      console.log(`üìä R√©partition:`);
      console.log(`   - Films: ${movies.length}`);
      console.log(`   - S√©ries: ${series.length}`);
      
      if (series.length > 0) {
        console.log(`\nüéØ Premi√®re s√©rie trouv√©e:`);
        console.log(`   - Titre: ${series[0].title}`);
        console.log(`   - Ann√©e: ${series[0].year}`);
        console.log(`   - Type: ${series[0].type}`);
        console.log(`   - R√©alisateur: ${series[0].director || 'N/A'}`);
      }
      
      if (movies.length > 0) {
        console.log(`\n‚ö†Ô∏è ATTENTION: Films trouv√©s dans la recherche de s√©ries!`);
        console.log(`   - Titre: ${movies[0].title}`);
        console.log(`   - Type: ${movies[0].type}`);
      }
      
    } else {
      console.log('‚ùå Aucun r√©sultat trouv√©');
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
  }
}

async function testMixedSearch() {
  console.log('\nüîÑ Test de recherche mixte (sans type sp√©cifique)...\n');

  try {
    // Test avec "Matrix" sans type - devrait retourner films ET s√©ries
    console.log('üîç Recherche "Matrix" (sans type)...');
    const mixedSuggestions = await MovieService.searchMovieSuggestions('Matrix');
    
    if (mixedSuggestions && mixedSuggestions.length > 0) {
      console.log(`‚úÖ ${mixedSuggestions.length} r√©sultats trouv√©s\n`);
      
      const movies = mixedSuggestions.filter(s => s.type === 'Film');
      const series = mixedSuggestions.filter(s => s.type === 'S√©rie');
      
      console.log(`üìä R√©partition:`);
      console.log(`   - Films: ${movies.length}`);
      console.log(`   - S√©ries: ${series.length}`);
      
      console.log(`\nüìã Tous les r√©sultats:`);
      mixedSuggestions.forEach((item, index) => {
        console.log(`   ${index + 1}. ${item.title} (${item.year}) - ${item.type}`);
      });
      
    } else {
      console.log('‚ùå Aucun r√©sultat trouv√©');
    }
    
  } catch (error) {
    console.log(`‚ùå Erreur: ${error.message}`);
  }
}

// Test de validation des formulaires
async function testFormValidation() {
  console.log('\n‚úÖ Test de validation des formulaires...\n');

  console.log('üé¨ Formulaire FILM:');
  console.log('   - Type: "movie"');
  console.log('   - Recherche: Films uniquement');
  console.log('   - URL: /search/movie');
  
  console.log('\nüì∫ Formulaire S√âRIE:');
  console.log('   - Type: "tv"');
  console.log('   - Recherche: S√©ries uniquement');
  console.log('   - URL: /search/tv');
  
  console.log('\nüîÑ Recherche MIXTE:');
  console.log('   - Type: null/undefined');
  console.log('   - Recherche: Films ET s√©ries');
  console.log('   - URL: /search/multi');
}

// Ex√©cution
async function runTests() {
  console.log('üöÄ Test du filtrage par type dans les formulaires\n');
  
  await testMovieForm();
  await testSerieForm();
  await testMixedSearch();
  await testFormValidation();
  
  console.log('\n‚úÖ Tests termin√©s !');
  console.log('\nüìã R√©sum√©:');
  console.log('   - Formulaire FILM: Recherche uniquement des films');
  console.log('   - Formulaire S√âRIE: Recherche uniquement des s√©ries');
  console.log('   - Filtrage correct par type dans TMDB API');
  console.log('   - Interface adapt√©e selon le type');
}

if (require.main === module) {
  runTests();
} 